!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,r){!function(e,t){if(!O[e]||!w[e])return;for(var r in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,r)&&(_[r]=t[r]);0==--y&&0===m&&S()}(e,r),t&&t(e,r)};var r,n=!0,o="0a58b7ad47457b4485ff",i=1e4,s={},a=[],c=[];function d(e){var t=D[e];if(!t)return A;var n=function(n){return t.hot.active?(D[n]?-1===D[n].parents.indexOf(e)&&D[n].parents.push(e):(a=[e],r=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),a=[]),A(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return A[e]},set:function(t){A[e]=t}}};for(var i in A)Object.prototype.hasOwnProperty.call(A,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(n,i,o(i));return n.e=function(e){return"ready"===p&&f("prepare"),m++,A.e(e).then(t,(function(e){throw t(),e}));function t(){m--,"prepare"===p&&(v[e]||E(e),0===m&&0===y&&S())}},n.t=function(e,t){return 1&t&&(e=n(e)),A.t(e,-2&t)},n}function l(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==e,active:!0,accept:function(e,r){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._acceptedDependencies[e[n]]=r||function(){};else t._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._declinedDependencies[e[r]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=t._disposeHandlers.indexOf(e);r>=0&&t._disposeHandlers.splice(r,1)},check:x,apply:j,status:function(e){if(!e)return p;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var t=u.indexOf(e);t>=0&&u.splice(t,1)},data:s[e]};return r=void 0,t}var u=[],p="idle";function f(e){p=e;for(var t=0;t<u.length;t++)u[t].call(null,e)}var h,_,g,y=0,m=0,v={},w={},O={};function b(e){return+e+""===e?+e:e}function x(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return n=e,f("check"),(t=i,t=t||1e4,new Promise((function(e,r){if("undefined"==typeof XMLHttpRequest)return r(new Error("No browser support"));try{var n=new XMLHttpRequest,i=A.p+""+o+".hot-update.json";n.open("GET",i,!0),n.timeout=t,n.send(null)}catch(e){return r(e)}n.onreadystatechange=function(){if(4===n.readyState)if(0===n.status)r(new Error("Manifest request to "+i+" timed out."));else if(404===n.status)e();else if(200!==n.status&&304!==n.status)r(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(n.responseText)}catch(e){return void r(e)}e(t)}}}))).then((function(e){if(!e)return f("idle"),null;w={},v={},O=e.c,g=e.h,f("prepare");var t=new Promise((function(e,t){h={resolve:e,reject:t}}));_={};return E(1),"prepare"===p&&0===m&&0===y&&S(),t}));var t}function E(e){O[e]?(w[e]=!0,y++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=A.p+""+e+"."+o+".hot-update.js",document.head.appendChild(t)}(e)):v[e]=!0}function S(){f("ready");var e=h;if(h=null,e)if(n)Promise.resolve().then((function(){return j(n)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var r in _)Object.prototype.hasOwnProperty.call(_,r)&&t.push(b(r));e.resolve(t)}}function j(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var r,n,i,c,d;function l(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),i=o.id,s=o.chain;if((c=D[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var a=0;a<c.parents.length;a++){var d=c.parents[a],l=D[d];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([d]),moduleId:i,parentId:d};-1===t.indexOf(d)&&(l.hot._acceptedDependencies[i]?(r[d]||(r[d]=[]),u(r[d],[i])):(delete r[d],t.push(d),n.push({chain:s.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}t=t||{};var h={},y=[],m={},v=function(){console.warn("[HMR] unexpected require("+x.moduleId+") to disposed module")};for(var w in _)if(Object.prototype.hasOwnProperty.call(_,w)){var x;d=b(w);var E=!1,S=!1,j=!1,I="";switch((x=_[w]?l(d):{type:"disposed",moduleId:w}).chain&&(I="\nUpdate propagation: "+x.chain.join(" -> ")),x.type){case"self-declined":t.onDeclined&&t.onDeclined(x),t.ignoreDeclined||(E=new Error("Aborted because of self decline: "+x.moduleId+I));break;case"declined":t.onDeclined&&t.onDeclined(x),t.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+x.moduleId+" in "+x.parentId+I));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(x),t.ignoreUnaccepted||(E=new Error("Aborted because "+d+" is not accepted"+I));break;case"accepted":t.onAccepted&&t.onAccepted(x),S=!0;break;case"disposed":t.onDisposed&&t.onDisposed(x),j=!0;break;default:throw new Error("Unexception type "+x.type)}if(E)return f("abort"),Promise.reject(E);if(S)for(d in m[d]=_[d],u(y,x.outdatedModules),x.outdatedDependencies)Object.prototype.hasOwnProperty.call(x.outdatedDependencies,d)&&(h[d]||(h[d]=[]),u(h[d],x.outdatedDependencies[d]));j&&(u(y,[x.moduleId]),m[d]=v)}var q,C=[];for(n=0;n<y.length;n++)d=y[n],D[d]&&D[d].hot._selfAccepted&&m[d]!==v&&C.push({module:d,errorHandler:D[d].hot._selfAccepted});f("dispose"),Object.keys(O).forEach((function(e){!1===O[e]&&function(e){delete installedChunks[e]}(e)}));for(var H,P,k=y.slice();k.length>0;)if(d=k.pop(),c=D[d]){var T={},M=c.hot._disposeHandlers;for(i=0;i<M.length;i++)(r=M[i])(T);for(s[d]=T,c.hot.active=!1,delete D[d],delete h[d],i=0;i<c.children.length;i++){var L=D[c.children[i]];L&&((q=L.parents.indexOf(d))>=0&&L.parents.splice(q,1))}}for(d in h)if(Object.prototype.hasOwnProperty.call(h,d)&&(c=D[d]))for(P=h[d],i=0;i<P.length;i++)H=P[i],(q=c.children.indexOf(H))>=0&&c.children.splice(q,1);for(d in f("apply"),o=g,m)Object.prototype.hasOwnProperty.call(m,d)&&(e[d]=m[d]);var R=null;for(d in h)if(Object.prototype.hasOwnProperty.call(h,d)&&(c=D[d])){P=h[d];var U=[];for(n=0;n<P.length;n++)if(H=P[n],r=c.hot._acceptedDependencies[H]){if(-1!==U.indexOf(r))continue;U.push(r)}for(n=0;n<U.length;n++){r=U[n];try{r(P)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:d,dependencyId:P[n],error:e}),t.ignoreErrored||R||(R=e)}}}for(n=0;n<C.length;n++){var N=C[n];d=N.module,a=[d];try{A(d)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(r){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:r,originalError:e}),t.ignoreErrored||R||(R=r),R||(R=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:d,error:e}),t.ignoreErrored||R||(R=e)}}return R?(f("fail"),Promise.reject(R)):(f("idle"),new Promise((function(e){e(y)})))}var D={};function A(t){if(D[t])return D[t].exports;var r=D[t]={i:t,l:!1,exports:{},hot:l(t),parents:(c=a,a=[],c),children:[]};return e[t].call(r.exports,r,r.exports,d(t)),r.l=!0,r.exports}A.m=e,A.c=D,A.d=function(e,t,r){A.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},A.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},A.t=function(e,t){if(1&t&&(e=A(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(A.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)A.d(r,n,function(t){return e[t]}.bind(null,n));return r},A.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return A.d(t,"a",t),t},A.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},A.p="/assets/",A.h=function(){return o},d(1134)(A.s=1134)}({1134:function(e,t,r){e.exports=r(1135)},1135:function(e,t,r){"use strict";r.r(t);var n=r(594),o=r(23);n.CrossStorageHub.init(o.a.crossStorageRules)},1136:function(e,t,r){!function(r){function n(e,t){var r;t=t||{},this._id=n._generateUUID(),this._promise=t.promise||Promise,this._frameId=t.frameId||"CrossStorageClient-"+this._id,this._origin=n._getOrigin(e),this._requests={},this._connected=!1,this._closed=!1,this._count=0,this._timeout=t.timeout||5e3,this._listener=null,this._installListener(),t.frameId&&(r=document.getElementById(t.frameId)),r&&this._poll(),r=r||this._createFrame(e),this._hub=r.contentWindow}n.frameStyle={display:"none",position:"absolute",top:"-999px",left:"-999px"},n._getOrigin=function(e){var t;return(t=document.createElement("a")).href=e,t.host||(t=window.location),((t.protocol&&":"!==t.protocol?t.protocol:window.location.protocol)+"//"+t.host).replace(/:80$|:443$/,"")},n._generateUUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},n.prototype.onConnect=function(){var e=this;return this._connected?this._promise.resolve():this._closed?this._promise.reject(new Error("CrossStorageClient has closed")):(this._requests.connect||(this._requests.connect=[]),new this._promise((function(t,r){var n=setTimeout((function(){r(new Error("CrossStorageClient could not connect"))}),e._timeout);e._requests.connect.push((function(e){if(clearTimeout(n),e)return r(e);t()}))})))},n.prototype.set=function(e,t){return this._request("set",{key:e,value:t})},n.prototype.get=function(e){var t=Array.prototype.slice.call(arguments);return this._request("get",{keys:t})},n.prototype.del=function(){var e=Array.prototype.slice.call(arguments);return this._request("del",{keys:e})},n.prototype.clear=function(){return this._request("clear")},n.prototype.getKeys=function(){return this._request("getKeys")},n.prototype.close=function(){var e=document.getElementById(this._frameId);e&&e.parentNode.removeChild(e),window.removeEventListener?window.removeEventListener("message",this._listener,!1):window.detachEvent("onmessage",this._listener),this._connected=!1,this._closed=!0},n.prototype._installListener=function(){var e=this;this._listener=function(t){var r,n,o;if(!e._closed&&t.data&&"string"==typeof t.data&&("null"===t.origin?"file://":t.origin)===e._origin)if("cross-storage:unavailable"!==t.data){if(-1!==t.data.indexOf("cross-storage:")&&!e._connected){if(e._connected=!0,!e._requests.connect)return;for(r=0;r<e._requests.connect.length;r++)e._requests.connect[r](n);delete e._requests.connect}if("cross-storage:ready"!==t.data){try{o=JSON.parse(t.data)}catch(e){return}o.id&&e._requests[o.id]&&e._requests[o.id](o.error,o.result)}}else{if(e._closed||e.close(),!e._requests.connect)return;for(n=new Error("Closing client. Could not access localStorage in hub."),r=0;r<e._requests.connect.length;r++)e._requests.connect[r](n)}},window.addEventListener?window.addEventListener("message",this._listener,!1):window.attachEvent("onmessage",this._listener)},n.prototype._poll=function(){var e,t,r;r="file://"===(e=this)._origin?"*":e._origin,t=setInterval((function(){if(e._connected)return clearInterval(t);e._hub&&e._hub.postMessage("cross-storage:poll",r)}),1e3)},n.prototype._createFrame=function(e){var t,r;for(r in(t=window.document.createElement("iframe")).id=this._frameId,n.frameStyle)n.frameStyle.hasOwnProperty(r)&&(t.style[r]=n.frameStyle[r]);return window.document.body.appendChild(t),t.src=e,t},n.prototype._request=function(e,t){var r,n;return this._closed?this._promise.reject(new Error("CrossStorageClient has closed")):((n=this)._count++,r={id:this._id+":"+n._count,method:"cross-storage:"+e,params:t},new this._promise((function(e,t){var o,i,s;o=setTimeout((function(){n._requests[r.id]&&(delete n._requests[r.id],t(new Error("Timeout: could not perform "+r.method)))}),n._timeout),n._requests[r.id]=function(i,s){if(clearTimeout(o),delete n._requests[r.id],i)return t(new Error(i));e(s)},Array.prototype.toJSON&&(i=Array.prototype.toJSON,Array.prototype.toJSON=null),s="file://"===n._origin?"*":n._origin,n._hub.postMessage(JSON.stringify(r),s),i&&(Array.prototype.toJSON=i)})))},e.exports?e.exports=n:t.CrossStorageClient=n}()},1137:function(e,t,r){var n;n={init:function(e){var t=!0;try{window.localStorage||(t=!1)}catch(e){t=!1}if(!t)try{return window.parent.postMessage("cross-storage:unavailable","*")}catch(e){return}n._permissions=e||[],n._installListener(),window.parent.postMessage("cross-storage:ready","*")},_installListener:function(){var e=n._listener;window.addEventListener?window.addEventListener("message",e,!1):window.attachEvent("onmessage",e)},_listener:function(e){var t,r,o,i,s,a,c;if(t="null"===e.origin?"file://":e.origin,"cross-storage:poll"===e.data)return window.parent.postMessage("cross-storage:ready",e.origin);if("cross-storage:ready"!==e.data){try{o=JSON.parse(e.data)}catch(e){return}if(o&&"string"==typeof o.method&&(i=o.method.split("cross-storage:")[1])){if(n._permitted(t,i))try{a=n["_"+i](o.params)}catch(e){s=e.message}else s="Invalid permissions for "+i;c=JSON.stringify({id:o.id,error:s,result:a}),r="file://"===t?"*":t,window.parent.postMessage(c,r)}}},_permitted:function(e,t){var r,o,i;if(r=["get","set","del","clear","getKeys"],!n._inArray(t,r))return!1;for(o=0;o<n._permissions.length;o++)if((i=n._permissions[o]).origin instanceof RegExp&&i.allow instanceof Array&&i.origin.test(e)&&n._inArray(t,i.allow))return!0;return!1},_set:function(e){window.localStorage.setItem(e.key,e.value)},_get:function(e){var t,r,n,o;for(t=window.localStorage,r=[],n=0;n<e.keys.length;n++){try{o=t.getItem(e.keys[n])}catch(e){o=null}r.push(o)}return r.length>1?r:r[0]},_del:function(e){for(var t=0;t<e.keys.length;t++)window.localStorage.removeItem(e.keys[t])},_clear:function(){window.localStorage.clear()},_getKeys:function(e){var t,r,n;for(n=[],r=window.localStorage.length,t=0;t<r;t++)n.push(window.localStorage.key(t));return n},_inArray:function(e,t){for(var r=0;r<t.length;r++)if(e===t[r])return!0;return!1},_now:function(){return"function"==typeof Date.now?Date.now():(new Date).getTime()}},e.exports?e.exports=n:t.CrossStorageHub=n},23:function(e,t,r){"use strict";var n={perPage:15,spinnerConfig:{lines:11,length:0,width:8,radius:60,scale:.25,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:91,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"}},o=n,i=("undefined"!=typeof __REACT_HOT_LOADER__&&__REACT_HOT_LOADER__.register(n,"default","/Users/jonathanwohl/Projects/Openframe/Openframe-WebApp/src/config/base.js"),{appEnv:"dev",apiBase:"http://localhost:8888/v0/",crossStorageRules:[{origin:/localhost:3030$/,allow:["get"]}]}),s=Object.freeze(Object.assign({},o,i));t.a=s,"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(i,"config","/Users/jonathanwohl/Projects/Openframe/Openframe-WebApp/src/config/dev.js"),__REACT_HOT_LOADER__.register(s,"default","/Users/jonathanwohl/Projects/Openframe/Openframe-WebApp/src/config/dev.js"))},594:function(e,t,r){e.exports={CrossStorageClient:r(1136),CrossStorageHub:r(1137)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,